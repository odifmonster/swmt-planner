from typing import NamedTuple, Protocol
import datetime as dt

__all__ = ['ContRange', 'FloatRange', 'DateRange']

class _SupportsComp(Protocol):
    def __eq__(self, other: '_SupportsComp') -> bool: ...
    def __le__(self, other: '_SupportsComp') -> bool: ...
    def __lt__(self, other: '_SupportsComp') -> bool: ...
    def __ge__(self, other: '_SupportsComp') -> bool: ...
    def __gt__(self, other: '_SupportsComp') -> bool: ...

class ContRange[T: _SupportsComp](NamedTuple):
    minval: T
    maxval: T
    def contains(self, val: 'T | ContRange[T]', minincl: bool = True,
                 maxincl: bool = True) -> bool: ...
    def overlaps(self, rng: 'ContRange[T]', minincl: bool = True,
                 maxincl: bool = True) -> bool: ...
    def is_above(self, val: T) -> bool: ...
    def is_below(self, val: T) -> bool: ...

class FloatRange(ContRange[float]):
    def average(self) -> float: ...

class DateRange(ContRange[dt.datetime]):
    ...