from .data import Data, DataView, match_props, repr_props
from .atom import Atom, AtomView

from typing import Hashable, Generator
from swmtplanner.support import SwmtBase, Viewer

__all__ = ['Data', 'DataView', 'match_props', 'repr_props', 'Atom', 'AtomView',
           'Grouped', 'GroupedView']

class Grouped[T: Hashable, U: Hashable](
    SwmtBase, priv=('prop_names','prop_vals','unbound','ids_map','subgrps','view')
    ):
    def __init__(self, *args: *tuple[str, ...], **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[U]: ...
    def __contains__(self, key: U) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def n_items(self) -> int: ...
    def get(self, id: T) -> DataView[T]: ...
    def add(self, data: Data[T]) -> None: ...
    def remove(self, dview: DataView[T], remkey: bool = False) -> Data[T]: ...
    def view(self) -> GroupedView[T, U]: ...

class GroupedView[T: Hashable, U: Hashable](
    Viewer[Grouped[T, U]], dunders=('len','iter','contains'),
    attrs=('depth','n_items'), funcs=('get',)
    ):
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[U]: ...
    def __contains__(self, key: U) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def n_items(self) -> int: ...
    def get(self, id: T) -> DataView[T]: ...