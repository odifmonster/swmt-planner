from typing import Hashable, Generator
from swmtplanner.support import SwmtBase, Viewer
from swmtplanner.support.grouped import Data, DataView

class Atom[T: Hashable](SwmtBase, priv=('prop_names','prop_vals','data','view')):
    def __init__(self, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[tuple[()]]: ...
    def __contains__(self, key: tuple[()]) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def n_items(self) -> int: ...
    @property
    def data(self) -> DataView[T] | None: ...
    def get(self, id: T) -> DataView[T]: ...
    def add(self, data: Data[T]) -> None: ...
    def remove(self, dview: DataView[T], remkey: bool = False) -> Data[T]: ...
    def view(self) -> AtomView[T]: ...

class AtomView[T: Hashable](Viewer[Atom[T]], dunders=('len','iter','contains'),
                  attrs=('depth','n_items','data'), funcs=('get',)):
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[tuple[()]]: ...
    def __contains__(self, key: tuple[()]) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def n_items(self) -> int: ...
    @property
    def data(self) -> DataView[T] | None: ...
    def get(self, id: T) -> DataView[T]: ...