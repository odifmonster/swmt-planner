from enum import Enum
from swmtplanner.support import SwmtBase, HasID

__all__ = ['Shade', 'Color', 'DYES']

DYES: dict[str, Color] = ...

def load_dyes(fpath: str) -> None: ...

class Shade(Enum):
    """A class representing "shade ratings" of dye formulae."""
    EMPTY = ...
    HEAVYSTRIP = ...
    STRIP = ...
    SOLUTION = ...
    LIGHT1 = ...
    LIGHT2 = ...
    MEDIUM = ...
    BLACK = ...
    @classmethod
    def from_str(cls, val: str) -> Shade:
        """Get a Shade object from its string value."""
        ...
    @classmethod
    def from_int(cls, val: int) -> Shade:
        """Get a Shade object from its integer value."""
        ...
    def __lt__(self, other: Shade) -> bool: ...
    def __le__(self, other: Shade) -> bool: ...
    def __eq__(self, other: Shade) -> bool: ...
    def __ge__(self, other: Shade) -> bool: ...
    def __gt__(self, other: Shade) -> bool: ...

class Color(SwmtBase, HasID[str], read_only=('name','shade','soil'),
            priv=('id',)):
    """
    A class representing fabric dye formulae. Includes
    information about the shade and how much it soils a jet
    after running.
    """
    def __init__(self, formula: int, name: str, shade: Shade) -> None:
        """
        Initialize a new Color object.

          formula:
            The dye formula as an integer.
          name:
            The name of the color.
          shade:
            The shade of the color.
        """
        ...
    @property
    def name(self) -> str:
        """The name of this color."""
        ...
    @property
    def shade(self) -> Shade:
        """The shade of this color."""
        ...
    @property
    def soil(self) -> int:
        """The amount of "soil" that this color adds to a jet after running."""
        ...
    def get_needed_strip(self, jss: int, max_clr: Shade) -> str | None:
        """
        Get the strip cycle (if any) needed to run this color as the
        string id of the associated FabricItem.
        """
        ...