from typing import Any
import datetime as dt
from swmtplanner.support import SwmtBase, HasID, Viewer
from swmtplanner.swmttypes.products import GreigeStyle, FabricItem
from swmtplanner.swmttypes.materials import Lot, LotView

__all__ = ['Job', 'JobView']

type _Product = GreigeStyle | FabricItem

class Job[T: _Product](SwmtBase, HasID[str],
                       read_only=('id','start','end','cycle_time','rawmat','moveable'),
                       priv=('lots','view')):
    def __init__(self, lots: list[Lot[Any, T, Any]], start: dt.datetime,
                 cycle_time: dt.timedelta, moveable: bool, idx: int | None = None) -> None: ...
    @property
    def start(self) -> dt.datetime: ...
    @property
    def end(self) -> dt.datetime: ...
    @property
    def cycle_time(self) -> dt.timedelta: ...
    @property
    def moveable(self) -> bool: ...
    @property
    def rawmat(self) -> T: ...
    @property
    def lots(self) -> list[LotView[Any, T, Any]]: ...
    @property
    def is_product(self) -> bool: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def view(self) -> JobView[T]: ...

class JobView[T: _Product](
    Viewer[Job[T]], dunders=('hash','eq','repr'),
    attrs=('prefix','id','start','end','cycle_time','rawmat','moveable',
           'lots','is_product')):
    def __hash__(self) -> int: ...
    def __eq__(self, value: Job[T] | JobView[T]) -> bool: ...
    def __repr__(self) -> str: ...
    @property
    def prefix(self) -> str: ...
    @property
    def id(self) -> int: ...
    @property
    def start(self) -> dt.datetime: ...
    @property
    def end(self) -> dt.datetime: ...
    @property
    def cycle_time(self) -> dt.timedelta: ...
    @property
    def moveable(self) -> bool: ...
    @property
    def rawmat(self) -> T: ...
    @property
    def lots(self) -> list[LotView[Any, T, Any]]: ...
    @property
    def is_product(self) -> bool: ...