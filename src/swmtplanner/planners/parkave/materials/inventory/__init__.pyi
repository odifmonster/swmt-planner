from .roll import *

from typing import Generator, NamedTuple, overload
import datetime as dt
from swmtplanner.support import FloatRange
from swmtplanner.support.grouped import Atom, AtomView, Grouped, GroupedView
from swmtplanner.swmttypes.products import GreigeStyle
from swmtplanner.swmttypes.materials import Status, Snapshot

__all__ = ['KnitPlant', 'GrgRollSize', 'GRollAlloc', 'PortLoad', 'GrgRoll',
           'GrgRollView', 'PAInv', 'SearchParams']

class _RollAtom(Atom[str]):
    def __getitem__(self, key: tuple[()]) -> _RollAtomView: ...
    @property
    def data(self) -> GrgRollView | None: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def view(self) -> _RollAtomView: ...

class _RollAtomView(AtomView[str]):
    def __getitem__(self, key: tuple[()]) -> _RollAtomView: ...
    @property
    def data(self) -> GrgRollView | None: ...
    def get(self, id: str) -> GrgRollView: ...
    def itervalues(self) -> Generator[GrgRollView]: ...

class _SizeGroup(Grouped[str, str]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def iterkeys(self) -> Generator[tuple[str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def view(self) -> _SizeGroupView: ...

class _SizeGroupView(GroupedView[str, str]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def iterkeys(self) -> Generator[tuple[str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...

class _ItemGroup(Grouped[str, GrgRollSize]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: GrgRollSize | tuple[GrgRollSize]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GrgRollSize, str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def iterkeys(self) -> Generator[tuple[GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def view(self) -> _ItemGroupView: ...

class _ItemGroupView(GroupedView[str, GrgRollSize]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: GrgRollSize | tuple[GrgRollSize]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GrgRollSize, str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def iterkeys(self) -> Generator[tuple[GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...

class _PlantGroup(Grouped[str, GreigeStyle]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, GrgRollSize]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, GrgRollSize, str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def view(self) -> _PlantGroupView: ...

class _PlantGroupView(GroupedView[str, GrgRollSize]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, GrgRollSize]) -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, GrgRollSize, str]) -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...

class _StatusGroup(Grouped[str, KnitPlant]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _StatusGroupView: ...
    @overload
    def __getitem__(self, key: KnitPlant | tuple[KnitPlant]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle, GrgRollSize]) \
        -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle, GrgRollSize, str]) \
        -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def iterkeys(self) -> Generator[tuple[KnitPlant, GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def view(self) -> _StatusGroupView: ...

class _StatusGroupView(GroupedView[str, KnitPlant]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _StatusGroupView: ...
    @overload
    def __getitem__(self, key: KnitPlant | tuple[KnitPlant]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle, GrgRollSize]) \
        -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[KnitPlant, GreigeStyle, GrgRollSize, str]) \
        -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def iterkeys(self) -> Generator[tuple[KnitPlant, GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...

class SearchParams(NamedTuple):
    n_ports: int
    create: bool = False
    create_date: dt.datetime | None = None
    new_only: bool = False
    max_date: dt.datetime | None = None
    plt: KnitPlant = KnitPlant.EITHER

class PAInv(Grouped[str, Status]):
    def __init__(self) -> None:
        """Initialize a new Park Ave raw materials inventory."""
        ...
    @overload
    def __getitem__(self, key: tuple[()]) -> _PAInvView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle, GrgRollSize]) \
        -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle, GrgRollSize, str]) \
        -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def add(self, data: GrgRoll) -> None: ...
    def remove(self, dview: GrgRollView, remkey: bool = False) -> GrgRoll: ...
    def iterkeys(self) -> Generator[tuple[Status, KnitPlant, GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...
    def add_all_pieces(self, snapshot: Snapshot | None, loads: list[PortLoad]) \
        -> None: ...
    def get_comb_loads(self, snapshot: Snapshot | None, greige: GreigeStyle,
                       wt_rng: FloatRange, params: SearchParams) \
                       -> tuple[list[PortLoad], int]: ...
    def get_port_loads(self, snapshot: Snapshot | None, greige: GreigeStyle,
                       wt_rng: FloatRange, params: SearchParams) \
                       -> list[PortLoad]: ...
    def view(self) -> _PAInvView: ...

class _PAInvView(GroupedView[str, Status]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _PAInvView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant]) -> _PlantGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle]) -> _ItemGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle, GrgRollSize]) \
        -> _SizeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[Status, KnitPlant, GreigeStyle, GrgRollSize, str]) \
        -> _RollAtomView: ...
    def get(self, id: str) -> GrgRollView: ...
    def iterkeys(self) -> Generator[tuple[Status, KnitPlant, GreigeStyle, GrgRollSize, str]]: ...
    def itervalues(self) -> Generator[GrgRollView]: ...