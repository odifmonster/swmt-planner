from typing import NamedTuple
from enum import Enum
import datetime as dt
from swmtplanner.support import Quantity, SwmtBase, HasID
from swmtplanner.support.grouped import Data, DataView
from swmtplanner.swmttypes.products import GreigeStyle
from swmtplanner.swmttypes.materials import Status, Snapshot

__all__ = ['KnitPlant', 'GrgRollSize', 'GRollAlloc', 'PortLoad', 'GrgRoll',
           'GrgRollView']

class KnitPlant(Enum):
    WVILLE = ...
    INFINITE = ...
    EITHER = ...

class GrgRollSize(Enum):
    ONE_PORT = ...
    TWO_PORT = ...
    PARTIAL = ...
    ODD = ...

class GRollAlloc(SwmtBase, HasID[int],
                 read_only=('id','roll_id','status','avail_date','weight')):
    def __init__(self, roll_id: str, status: Status, avail_date: dt.datetime,
                 weight: Quantity) -> None: ...
    @property
    def roll_id(self) -> str: ...
    @property
    def status(self) -> Status: ...
    @property
    def avail_date(self) -> str: ...
    @property
    def weight(self) -> Quantity: ...

class PortLoad(NamedTuple):
    rolls: tuple[GRollAlloc, ...]
    status: Status
    avail_date: dt.datetime
    weight: Quantity

class GrgRoll(Data[str], mut_in_group=False,
              read_only=('item','plant','status','received'),
              priv=('cur_wt','allocs','temp_allocs')):
    snapshot: Snapshot | None
    def __init__(self, id: str, item: GreigeStyle, plant: KnitPlant, status: Status,
                 received: dt.datetime, lbs: float) -> None: ...
    @property
    def item(self) -> GreigeStyle: ...
    @property
    def plant(self) -> KnitPlant: ...
    @property
    def status(self) -> Status: ...
    @property
    def received(self) -> dt.datetime: ...
    @property
    def weight(self) -> Quantity: ...
    @property
    def size(self) -> GrgRollSize: ...
    def allocate(self, lbs: float, snapshot: Snapshot | None = None) -> GRollAlloc: ...
    def deallocate(self, piece: GRollAlloc, snapshot: Snapshot | None = None) -> None: ...
    def apply_snap(self, snapshot: Snapshot | None) -> None: ...
    def view(self) -> GrgRollView: ...

class GrgRollView(DataView[str], attrs=('item','plant','status','received','weight','size')):
    def __init__(self, link: GrgRoll) -> None: ...
    @property
    def snapshot(self) -> Snapshot | None: ...
    @property
    def item(self) -> GreigeStyle: ...
    @property
    def plant(self) -> KnitPlant: ...
    @property
    def status(self) -> Status: ...
    @property
    def received(self) -> dt.datetime: ...
    @property
    def weight(self) -> Quantity: ...
    @property
    def size(self) -> GrgRollSize: ...