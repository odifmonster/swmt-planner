from typing import Generator, overload
import datetime as dt
from swmtplanner.swmttypes.products import fabric, FabricItem, GreigeStyle
from swmtplanner.swmttypes.demand import OrderKind, Order, OrderView, Req
from swmtplanner.support.grouped import Atom, AtomView, Grouped, GroupedView
from swmtplanner.planners.parkave.materials import DyeLot, DyeLotView

__all__ = ['FabOrder', 'FabOrderView', 'FabReq', 'FabDemand']

class FabOrder(Order[str, FabricItem]):
    @property
    def greige(self) -> GreigeStyle:
        """The greige style used by the fabric being ordered."""
        ...
    @property
    def color(self) -> fabric.Color:
        """The color of the fabric being ordered."""
        ...
    def assign(self, lot: DyeLot) -> None: ...
    def unassign(self, lot: DyeLotView) -> None: ...
    def late_cost(self, kind: OrderKind) -> float: ...
    def view(self) -> FabOrderView: ...

class FabOrderView(OrderView[str, FabricItem], funcs=('late_cost',)):
    @property
    def greige(self) -> GreigeStyle:
        """The greige style used by the fabric being ordered."""
        ...
    @property
    def color(self) -> fabric.Color:
        """The color of the fabric being ordered."""
        ...
    def late_cost(self, kind: OrderKind) -> float: ...

class FabReq(Req[FabricItem]):
    @property
    def orders(self) -> list[FabOrderView]: ...
    @property
    def lots(self) -> list[DyeLotView]: ...
    def excess_inv(self, by_date: dt.datetime) -> float: ...

class _FabAtom(Atom[str]):
    def __getitem__(self, key: tuple[()]) -> _FabAtomView: ...
    @property
    def data(self) -> FabOrderView | None: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def view(self) -> _FabAtomView: ...

class _FabAtomView(AtomView[str]):
    def __getitem__(self, key: tuple[()]) -> _FabAtomView: ...
    @property
    def data(self) -> FabOrderView | None: ...
    def get(self, id: str) -> FabOrderView: ...
    def itervalues(self) -> Generator[FabOrderView]: ...

class _ItemGroup(Grouped[str, str]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def iterkeys(self) -> Generator[tuple[str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def view(self) -> _ItemGrpView: ...

class _ItemGrpView(GroupedView[str, str]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def iterkeys(self) -> Generator[tuple[str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...

class _PNumGroup(Grouped[str, FabricItem]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: FabricItem | tuple[FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def iterkeys(self) -> Generator[tuple[FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def view(self) -> _PNumGrpView: ...

class _PNumGrpView(GroupedView[str, FabricItem]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: FabricItem | tuple[FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def iterkeys(self) -> Generator[tuple[FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...

class _ColorGroup(Grouped[str, int]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: int | tuple[int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[int, FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[int, FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def iterkeys(self) -> Generator[tuple[int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def view(self) -> _ColorGrpView: ...

class _ColorGrpView(GroupedView[str, int]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: int | tuple[int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[int, FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[int, FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def iterkeys(self) -> Generator[tuple[int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...

class _GreigeGroup(Grouped[str, fabric.Color]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _GreigeGrpView: ...
    @overload
    def __getitem__(self, key: fabric.Color | tuple[fabric.Color]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int, FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int, FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def iterkeys(self) -> Generator[tuple[fabric.Color, int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def view(self) -> _GreigeGrpView: ...

class _GreigeGrpView(GroupedView[str, fabric.Color]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _GreigeGrpView: ...
    @overload
    def __getitem__(self, key: fabric.Color | tuple[fabric.Color]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int, FabricItem]) -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[fabric.Color, int, FabricItem, str]) -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def iterkeys(self) -> Generator[tuple[fabric.Color, int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...

class FabDemand(Grouped[str, GreigeStyle]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _FabDmndView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> _GreigeGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int, FabricItem]) \
        -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int, FabricItem, str]) \
        -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def add(self, data: FabOrder) -> None: ...
    def remove(self, dview: FabOrderView, remkey: bool = False) -> FabOrder: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, fabric.Color, int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...
    def get_matches(self, order: FabOrder) -> Generator[FabOrderView]: ...
    def view(self) -> _FabDmndView: ...

class _FabDmndView(GroupedView[str, fabric.Color]):
    @overload
    def __getitem__(self, key: tuple[()]) -> _FabDmndView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> _GreigeGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color]) -> _ColorGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int]) -> _PNumGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int, FabricItem]) \
        -> _ItemGrpView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, fabric.Color, int, FabricItem, str]) \
        -> _FabAtomView: ...
    def get(self, id: str) -> FabOrderView: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, fabric.Color, int, FabricItem, str]]: ...
    def itervalues(self) -> Generator[FabOrderView]: ...